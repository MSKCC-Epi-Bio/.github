) %>%
unite(topics, topic_1:topic_12, sep = ", ") %>%
select(topics) %>%
mutate(
topics = stringr::str_remove_all(topics, ", NA")
) %>% View
df_repos =
tibble(
name = map(.x = c(1:length(msk_repos)), ~fct_repo_name(.x)),
url = map(.x = c(1:length(msk_repos)), ~fct_repo_url(.x)),
language = map(.x = c(1:length(msk_repos)), ~fct_repo_lang(.x)),
stars = map(.x = c(1:length(msk_repos)), ~fct_repo_stars(.x)),
forks = map(.x = c(1:length(msk_repos)), ~fct_repo_forks(.x)),
topic = map(.x = c(1:length(msk_repos)), ~fct_repo_topics(.x)),
updated_date = map(.x = c(1:length(msk_repos)), ~fct_repo_updated(.x))
) %>%
tidyr::unnest(
cols = everything()
) %>%
mutate(
topic = as.character(topic),
updated_date = format(as.Date(stringr::str_sub(updated_date, 1, 10)), "%m/%d/%Y")
) %>%
group_by(name) %>%
mutate(topic_id = row_number()) %>%
pivot_wider(
names_prefix = "topic_", names_from = topic_id, values_from = topic
) %>%
unite(topics, topic_1:topic_12, sep = ", ") %>%
mutate(
topics = stringr::str_remove_all(topics, ", NA")
) %>%
ungroup()
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
#fig.path = "man/figures/README-",
out.width = "100%",
echo = FALSE,
warning = FALSE,
fig.width = 10,
fig.height = 4.75
)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(gtsummary)
library(mskRutils)
#library(pkglogs)
ggplot2::theme_set(ggplot2::theme_bw())
# Chunk 2: scrape data
msk_repos =
gh::gh("GET /users/{username}/repos", username = "MSKCC-Epi-Bio")
fct_repo_name =
function(x){
msk_repos[[x]]$name
}
fct_repo_lang =
function(x){
msk_repos[[x]]$language
}
fct_repo_forks =
function(x){
msk_repos[[x]]$forks
}
fct_repo_updated =
function(x){
msk_repos[[x]]$pushed_at
}
fct_repo_topics =
function(x){
msk_repos[[x]]$topics
}
fct_repo_stars =
function(x){
msk_repos[[x]]$stargazers_count
}
fct_repo_url =
function(x){
msk_repos[[x]]$html_url
}
df_repos =
tibble(
name = map(.x = c(1:length(msk_repos)), ~fct_repo_name(.x)),
url = map(.x = c(1:length(msk_repos)), ~fct_repo_url(.x)),
language = map(.x = c(1:length(msk_repos)), ~fct_repo_lang(.x)),
stars = map(.x = c(1:length(msk_repos)), ~fct_repo_stars(.x)),
forks = map(.x = c(1:length(msk_repos)), ~fct_repo_forks(.x)),
topic = map(.x = c(1:length(msk_repos)), ~fct_repo_topics(.x)),
updated_date = map(.x = c(1:length(msk_repos)), ~fct_repo_updated(.x))
) %>%
tidyr::unnest(
cols = everything()
) %>%
mutate(
topic = as.character(topic),
updated_date = format(as.Date(stringr::str_sub(updated_date, 1, 10)), "%m/%d/%Y")
) %>%
group_by(name) %>%
mutate(topic_id = row_number()) %>%
pivot_wider(
names_prefix = "topic_", names_from = topic_id, values_from = topic
) %>%
unite(topics, topic_1:topic_12, sep = ", ") %>%
mutate(
topics = stringr::str_remove_all(topics, ", NA")
) %>%
ungroup()
# get CRAN downloads
# devtools::install_github("metacran/cranlogs")
cran_packages =
df_repos %>%
filter(topic == "r-package") %>%
pull(name)
library(stringr)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
#fig.path = "man/figures/README-",
out.width = "100%",
echo = FALSE,
warning = FALSE,
fig.width = 10,
fig.height = 4.75
)
library(dplyr)
library(tidyr)
library(stringr)
#library(purrr)
#library(ggplot2)
#library(gtsummary)
library(mskRutils)
#library(pkglogs)
ggplot2::theme_set(ggplot2::theme_bw())
# get CRAN downloads
# devtools::install_github("metacran/cranlogs")
cran_packages =
df_repos %>%
filter(str_detect(topic, "r-package")) %>%
pull(name)
# get CRAN downloads
# devtools::install_github("metacran/cranlogs")
cran_packages =
df_repos %>%
filter(str_detect(topics, "r-package")) %>%
pull(name)
cran_packages
df_cran =
cranlogs::cran_downloads(packages = cran_packages, from = "2012-01-01") %>%
group_by(package) %>%
summarise(n_downloads = sum(count)) %>%
rename(name = package)
df_repos_fin =
df_repos %>%
left_join(df_cran, by = "name")
df_repos_fin
df_repos_fin %>%
filter(language == "R") %>%
select(-c(topic, language))
df_repos_fin %>%
filter(language == "R") %>%
select(-c(topics, language))
df_repos_fin %>%
filter(language == "R") %>%
select(-c(language)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = stringr::str_c("[", name),
name = stringr::str_c(name, "]"),
url = stringr::str_c("(", url),
url = stringr::str_c(url, ")"),
n_downloads = ifelse(n_downloads == 0, "Coming to CRAN Soon \U1F60A", n_downloads)
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, n_downloads) %>%
knitr::kable(
align = "lcccc",
col.names = c("Package", "CRAN Downloads (All-Time)", "Stargazers", "Forks", "Last Updated")
)
df_repos_fin %>%
filter(language == "R") %>%
select(-c(language)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = stringr::str_c("[", name),
name = stringr::str_c(name, "]"),
url = stringr::str_c("(", url),
url = stringr::str_c(url, ")"),
n_downloads = ifelse(n_downloads == 0, "Coming to CRAN Soon \U1F60A", n_downloads)
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, n_downloads) %>%
knitr::kable(
align = "lccccc",
col.names = c("Package", "CRAN Downloads (All-Time)", "Stargazers", "Forks", "Last Updated", "Topics")
)
?unite
df_repos =
tibble(
name = map(.x = c(1:length(msk_repos)), ~fct_repo_name(.x)),
url = map(.x = c(1:length(msk_repos)), ~fct_repo_url(.x)),
language = map(.x = c(1:length(msk_repos)), ~fct_repo_lang(.x)),
stars = map(.x = c(1:length(msk_repos)), ~fct_repo_stars(.x)),
forks = map(.x = c(1:length(msk_repos)), ~fct_repo_forks(.x)),
topic = map(.x = c(1:length(msk_repos)), ~fct_repo_topics(.x)),
updated_date = map(.x = c(1:length(msk_repos)), ~fct_repo_updated(.x))
) %>%
tidyr::unnest(
cols = everything()
) %>%
mutate(
topic = as.character(topic),
updated_date = format(as.Date(str_sub(updated_date, 1, 10)), "%m/%d/%Y")
) %>%
group_by(name) %>%
mutate(topic_id = row_number()) %>%
pivot_wider(
names_prefix = "topic_", names_from = topic_id, values_from = topic
) %>%
unite(topic_1:last_col(), col = "topics", sep = ", ") %>%
mutate(
topics = stringr::str_remove_all(topics, ", NA")
) %>%
ungroup()
df_repos_fin %>%
filter(language %in% c("HTML", NA)) %>%
select(-c(language, n_downloads)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")")
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, stars) %>%
knitr::kable(
align = "lcccl",
col.names = c("Repository", "Stargazers", "Forks", "Last Updated", "Topics")
)
df_repos_fin %>%
filter(language == "R") %>%
select(-c(language)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")"),
n_downloads = ifelse(n_downloads == 0, "Coming to CRAN Soon \U1F60A", n_downloads),
topics = str_remove(topics, "[r,][r-package]")
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, n_downloads) %>%
knitr::kable(
align = "lccccl",
col.names = c("Package", "CRAN Downloads (All-Time)", "Stargazers", "Forks", "Last Updated", "Topics")
)
df_repos_fin %>%
filter(language == "R") %>%
select(-c(language)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")"),
n_downloads = ifelse(n_downloads == 0, "Coming to CRAN Soon \U1F60A", n_downloads),
topics = str_remove(topics, "[r,]r-package")
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, n_downloads) %>%
knitr::kable(
align = "lccccl",
col.names = c("Package", "CRAN Downloads (All-Time)", "Stargazers", "Forks", "Last Updated", "Topics")
)
df_repos_fin %>%
filter(language == "R") %>%
select(-c(language)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")"),
n_downloads = ifelse(n_downloads == 0, "Coming to CRAN Soon \U1F60A", n_downloads),
topics = str_remove(topics, "r-package")
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, n_downloads) %>%
knitr::kable(
align = "lccccl",
col.names = c("Package", "CRAN Downloads (All-Time)", "Stargazers", "Forks", "Last Updated", "Topics")
)
df_repos_fin %>%
filter(language == "R") %>%
select(-c(language)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")"),
n_downloads = ifelse(n_downloads == 0, "Coming to CRAN Soon \U1F60A", n_downloads),
topics = str_remove(topics, "r, r-package")
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, n_downloads) %>%
knitr::kable(
align = "lccccl",
col.names = c("Package", "CRAN Downloads (All-Time)", "Stargazers", "Forks", "Last Updated", "Topics")
)
df_repos_fin %>%
filter(language == "R") %>%
select(-c(language)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")"),
n_downloads = ifelse(n_downloads == 0, "Coming to CRAN Soon \U1F60A", n_downloads),
topics = str_remove(topics, ", r, r-package")
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, n_downloads) %>%
knitr::kable(
align = "lccccl",
col.names = c("Package", "CRAN Downloads (All-Time)", "Stargazers", "Forks", "Last Updated", "Topics")
)
msk_repos[[7]]$description
fct_repo_about =
function(x){
msk_repos[[x]]$description
}
df_repos =
tibble(
name = map(.x = c(1:length(msk_repos)), ~fct_repo_name(.x)),
url = map(.x = c(1:length(msk_repos)), ~fct_repo_url(.x)),
language = map(.x = c(1:length(msk_repos)), ~fct_repo_lang(.x)),
stars = map(.x = c(1:length(msk_repos)), ~fct_repo_stars(.x)),
updated_date = map(.x = c(1:length(msk_repos)), ~fct_repo_updated(.x)),
about = map(.x = c(1:length(msk_repos)), ~fct_repo_about(.x)),
topic = map(.x = c(1:length(msk_repos)), ~fct_repo_topics(.x))
) %>%
tidyr::unnest(
cols = everything()
) %>%
mutate(
topic = as.character(topic),
updated_date = format(as.Date(str_sub(updated_date, 1, 10)), "%m/%d/%Y")
) %>%
group_by(name) %>%
mutate(topic_id = row_number()) %>%
pivot_wider(
names_prefix = "topic_", names_from = topic_id, values_from = topic
) %>%
unite(topic_1:last_col(), col = "topics", sep = ", ") %>%
mutate(
topics = stringr::str_remove_all(topics, ", NA")
) %>%
ungroup()
# get CRAN downloads
# devtools::install_github("metacran/cranlogs")
cran_packages =
df_repos %>%
filter(str_detect(topics, "r-package")) %>%
pull(name)
df_cran =
cranlogs::cran_downloads(packages = cran_packages, from = "2012-01-01") %>%
group_by(package) %>%
summarise(n_downloads = sum(count)) %>%
rename(name = package)
df_repos_fin =
df_repos %>%
left_join(df_cran, by = "name")
df_repos_fin %>%
filter(language == "R") %>%
select(-c(language)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")"),
n_downloads = ifelse(n_downloads == 0, "Coming to CRAN Soon \U1F60A", n_downloads)
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, n_downloads)
df_repos_fin %>%
filter(language == "R") %>%
select(-c(language, topics)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")"),
n_downloads = ifelse(n_downloads == 0, "Coming to CRAN Soon \U1F60A", n_downloads)
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, n_downloads) %>%
knitr::kable(
align = "lccccl",
col.names = c("Package", "CRAN Downloads (All-Time)", "Stargazers", "Forks", "Last Updated", "Topics")
)
df_repos_fin %>%
filter(language == "R") %>%
select(-c(language, topics)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")"),
n_downloads = ifelse(n_downloads == 0, "Coming to CRAN Soon \U1F60A", n_downloads)
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, n_downloads) %>%
knitr::kable(
align = "lccccl",
col.names = c("Package", "CRAN Downloads (All-Time)", "Stargazers", "Last Updated", "About")
)
df_repos_fin %>%
filter(language == "R") %>%
select(-c(language, topics)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")"),
n_downloads = ifelse(n_downloads == 0, "Coming to CRAN Soon \U1F60A", n_downloads)
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, n_downloads)
df_repos_fin %>%
filter(language == "Jupyter Notebook") %>%
select(-c(topics, language, n_downloads)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")"),
topics = str_remove(topics, ", library, python")
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, ) %>%
knitr::kable(
align = "lccl",
col.names = c("Package", "GitHub Stars", "Last Updated", "About")
)
df_repos_fin %>%
filter(language == "Jupyter Notebook") %>%
select(-c(topics, language, n_downloads)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")")
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, ) %>%
knitr::kable(
align = "lccl",
col.names = c("Package", "GitHub Stars", "Last Updated", "About")
)
df_repos_fin %>%
filter(language == "SAS") %>%
select(-c(language, n_downloads)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")")
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, stars) %>%
knitr::kable(
align = "lccl",
col.names = c("Repository", "GitHub Stars", "Last Updated", "About")
)
df_repos_fin %>%
filter(language == "SAS") %>%
select(-c(topics, language, n_downloads)) %>%
distinct(name, .keep_all = T) %>%
mutate(
name = str_c("[", name),
name = str_c(name, "]"),
url = str_c("(", url),
url = str_c(url, ")")
) %>%
unite(name_url, name, url, sep = "") %>%
relocate(name_url, stars) %>%
knitr::kable(
align = "lccl",
col.names = c("Repository", "GitHub Stars", "Last Updated", "About")
)
?gh::gh
?knitr::kable
usethis::create_package()
usethis::create_package(path = here::here())
usethis::create_package(path = here::here("pkg"))
usethis::use_package(package = c("rmarkdown", "dplyr", "tidyr", "stringr", "purrr", "knitr", "gh", "cranlogs"))
c("rmarkdown", "dplyr", "tidyr", "stringr", "purrr", "knitr", "gh", "cranlogs") |> purrr::walk(~usethis::use_package(.x))
usethis::use_tidy_description()
usethis::use_mit_license()
